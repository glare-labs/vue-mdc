@use 'sass:map';
@use '../../../tokens';
@use '../../../theme';

$_md-sys-motion: tokens.md-sys-motion-values();

@mixin styles() {
    $tokens: tokens.md-comp-fab-values();

    & {
        $tokens: map.remove($tokens, 'container-shape', 'large-container-shape', 'small-container-shape');

        @each $token, $value in $tokens {
            --_#{$token}: #{$value};
        }
    }

    &.small[touch-target='wrapper'] {
        margin: max(0px, 48px - var(--_small-container-height));
    }

    &.medium[touch-target='wrapper'] {
        margin: max(0px, 48px - var(--_container-height));
    }

    &.large[touch-target='wrapper'] {
        margin: max(0px, 48px - var(--_large-container-height));
    }

    &.small .touch-target {
        height: calc(var(--_small-container-height) + 8px);
        width: calc(var(--_small-container-width) + 8px);
    }

    &.medium .touch-target {
        height: calc(var(--_container-height) + 8px);
        width: calc(var(--_container-width) + 8px);
    }

    &.large .touch-target {
        height: calc(var(--_large-container-height) + 8px);
        width: calc(var(--_large-container-width) + 8px);
    }

    &[touch-target='none'] .touch-target {
        display: none;
    }

    & .touch-target {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    & .icon,
    & .icon *,
    & .icon [data-component='icon'] {
        display: flex;
    }

    & {
        cursor: pointer;
        box-sizing: border-box;
        display: inline-flex;
        -webkit-tap-highlight-color: transparent;
        align-items: center;
        justify-content: center;
        vertical-align: middle;
        padding: 0;
        position: relative;
        transition-property: background-color;
        border-width: 0px;
        outline: none;
        // Required for elevation and ripple to stay below content
        z-index: 0;
        // Override the user-agent text-transform: none of <button>
        text-transform: inherit;
    }

    &.lowered {
        background-color: var(--_lowered-container-color);
    }

    /* Container Size */

    &.small {
        width: var(--_small-container-width);
        height: var(--_small-container-height);
    }
    &.medium.extended {
        width: inherit;
        height: var(--_container-height);
    }
    &.medium:not(.extended) {
        width: var(--_container-width);
        height: var(--_container-height);
    }
    &.large {
        width: var(--_large-container-width);
        height: var(--_large-container-height);
    }

    /* Shape */

    &.small {
        border-start-start-radius: var(--_small-container-shape-start-start);
        border-start-end-radius: var(--_small-container-shape-start-end);
        border-end-start-radius: var(--_small-container-shape-end-start);
        border-end-end-radius: var(--_small-container-shape-end-end);
    }
    &.medium {
        border-start-start-radius: var(--_container-shape-start-start);
        border-start-end-radius: var(--_container-shape-start-end);
        border-end-start-radius: var(--_container-shape-end-start);
        border-end-end-radius: var(--_container-shape-end-end);
    }
    &.large {
        border-start-start-radius: var(--_large-container-shape-start-start);
        border-start-end-radius: var(--_large-container-shape-start-end);
        border-end-start-radius: var(--_large-container-shape-end-start);
        border-end-end-radius: var(--_large-container-shape-end-end);
    }

    /* Padding */
    // The default content is needed because we do a bit of trickery. If there is
    // no slotted icon we need to have `padding-inline: 20px` but if there is, we
    // need `padding-inline: 16px 20px`.
    //
    // So what this approach does is make the margin / padding-inline of the outer
    // button `padding-inline: 16px 20px`, so if there is something slotted, it
    // renders correctly. This default content span then fills the extra `4px`
    // inline spacing if nothing is slotted which effectively makes the button's
    // inline spacing `20px/20px`.

    &.extended {
        padding-inline-start: 16px;
        padding-inline-end: 20px;
    }
    &.extended .icon {
        padding-inline-start: 4px;
    }

    &.extended .icon {
        margin-inline-end: 12px;
    }

    & [data-component='ripple'],
    & [data-component='elevation'] {
        // puts both behind content
        z-index: -1;
    }

    & [data-component='elevation'],
    & {
        // TODO: replace duration with animation tokens
        transition-duration: 280ms;
        transition-timing-function: map.get($_md-sys-motion, 'easing-emphasized');
    }

    /* Icon */

    &.small .icon [data-component='icon'] {
        @include theme.md-comp-icon-theme(
            (
                size: map.get($tokens, small-icon-size),
            )
        );
    }
    &.medium .icon [data-component='icon'] {
        @include theme.md-comp-icon-theme(
            (
                size: map.get($tokens, icon-size),
            )
        );
    }
    &.large .icon [data-component='icon'] {
        @include theme.md-comp-icon-theme(
            (
                size: map.get($tokens, large-icon-size),
            )
        );
    }

    & .label {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        font-family: var(--_label-text-font);
        font-size: var(--_label-text-size);
        line-height: var(--_label-text-line-height);
        font-weight: var(--_label-text-weight);
    }

    @media (forced-colors: active) {
        & {
            border: 1px solid ButtonText;
        }
        &.extended {
            // Adjust the padding-inline to account for the 1px border in HCM.
            padding-inline-start: 15px;
            padding-inline-end: 19px;
        }
    }
}
