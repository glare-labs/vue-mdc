@use 'sass:map';
@use 'sass:string';
@use './internal/shape';
@use './internal/validate';
@use './md-sys-color';
@use './md-sys-shape';
@use './md-sys-typescale';
@use './v0_192/md-comp-bottom-app-bar';

$_default: (
    'md-sys-color': md-sys-color.values-light(),
    'md-sys-shape': md-sys-shape.values(),
    'md-sys-typescale': md-sys-typescale.values(),
);

// prettier-ignore
$supported-tokens: (
    'container-color',
    'container-elevation',
    'container-height',
    'container-shape',
    'container-shape-end-end',
    'container-shape-end-start',
    'container-shape-start-end',
    'container-shape-start-start'
);

// prettier-ignore
$unsupported-tokens: ();

@function values($deps: $_default, $exclude-hardcoded-values: false, $exclude-custom-properties: false) {
    $tokens: md-comp-bottom-app-bar.values($deps, $exclude-hardcoded-values);
    $new-tokens: shape.get-new-logical-shape-tokens($tokens, 'container-shape');

    $tokens: validate.values($tokens, $supported-tokens: $supported-tokens, $unsupported-tokens: $unsupported-tokens, $new-tokens: $new-tokens);

    @if not $exclude-custom-properties {
        @each $token, $value in $tokens {
            @if string.index($token, 'container-shape-') == 1 {
                // Add fallback to shorthand for logical shape properties.
                $value: var(--md-checkbox-container-shape, #{$value});
            }

            $tokens: map.set($tokens, $token, var(--md-bottom-app-bar-#{$token}, #{$value}));
        }
    }

    @return $tokens;
}
