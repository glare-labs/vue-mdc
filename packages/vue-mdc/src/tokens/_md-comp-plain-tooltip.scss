@use 'sass:map';
@use 'sass:string';
@use './internal/shape';
@use './internal/validate';
@use './md-sys-color';
@use './md-sys-shape';
@use './md-sys-typescale';
@use './v0_192/md-comp-plain-tooltip';

$supported-tokens: (
    'container-color',
    'container-shape',
    'container-shape-end-end',
    'container-shape-end-start',
    'container-shape-start-end',
    'container-shape-start-start',
    'supporting-text-color',
    'supporting-text-font',
    'supporting-text-line-height',
    'supporting-text-size',
    'supporting-text-tracking',
    'supporting-text-type',
    'supporting-text-weight',
);

$unsupported-tokens: (
);

$_default: (
    'md-sys-color': md-sys-color.values-light(),
    'md-sys-shape': md-sys-shape.values(),
    'md-sys-typescale': md-sys-typescale.values(),
);

@function values(
    $deps: $_default,
    $exclude-hardcoded-values: false,
    $exclude-custom-properties: false
) {

    $tokens: md-comp-plain-tooltip.values(
        $deps,
        $exclude-hardcoded-values: $exclude-hardcoded-values 
    );

    $new-tokens: shape.get-new-logical-shape-tokens(
        $tokens, 
        'container-shape'
    );

    $tokens: validate.values(
        $tokens,
        $supported-tokens: $supported-tokens,
        $unsupported-tokens: $unsupported-tokens,
        $new-tokens: $new-tokens,
    );

    @if not $exclude-custom-properties {
        @each $token, $value in $tokens {
            @if string.index($token, 'container-shape-')==1 {
                // Add fallback to shorthand for logical shape properties.
                $value: var(--md-rich-tooltip-container-shape, #{$value});
            }

            $tokens: map.set(
                $tokens,
                $token,
                var(--md-rich-tooltip-#{$token}, #{$value})
            );
        }
    }

    @return $tokens;
}
